% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 29-Sep-2015 18:03:36
%
% This script assumes these variables are defined:
%
%   cancerInputs - input data.
%   cancerTargets - target data.

clear;
% load the cleared data
load('breast_cancer_data.mat');
labels = breast_cancer_data(:,43);
features = breast_cancer_data(:,1:42);
% mapped the original data to range of [-1,1]
[mapped_features,PS] = mapminmax(features);
m = length(labels);
nn_labels = zeros(m,6);
% transform the target lables to the Neural Network trainning format
for i = 1:m
    nn_labels(i,(labels(i,1)+1)) = 1;
end;

x = features';
t = nn_labels';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.

trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
for i = 90:100
hiddenLayerSize = i;
net = patternnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, ploterrhist(e)
figure, plotconfusion(t,y)
% figure, plotroc(t,y)
end;

